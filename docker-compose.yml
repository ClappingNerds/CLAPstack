services:
    lantern-suite:
        image: lanterndata/lantern-suite:pg15-latest
        container_name: lantern_clap
        # entrypoint: ["echo", "Lantern disabled"] # Uncomment this line to disable the container
        ports:
            - 15432:5432
            - 16432:6432
        environment:
            - POSTGRES_PASSWORD=postgres
        volumes:
            - ${PROJECT_DIR}/scripts/init_airflow.sql:/docker-entrypoint-initdb.d/init_airflow.sql
    redis:
        image: 'bitnami/redis:latest'
        container_name: redis_clap
        # entrypoint: ["echo", "Redis disabled."] # Uncomment this line to disable the container
        ports:
            - 16379:6379
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        volumes:
            - ${PROJECT_DIR}/redis:/bitnami
    airflow-webserver:
        image: bitnami/airflow:latest
        container_name: airflow_webserver_clap
        # entrypoint: ["echo", "Airflow disabled"] # Uncomment this line to disable the container
        ports:
            - 18080:8080
        depends_on:
            - redis
            - lantern-suite
        environment:
            - AIRFLOW_DATABASE_HOST=172.17.0.1
            - AIRFLOW_DATABASE_PORT_NUMBER=15432
            - AIRFLOW_DATABASE_NAME=airflow_db
            - AIRFLOW_DATABASE_USERNAME=airflow
            - AIRFLOW_DATABASE_PASSWORD=airflow_pass
            - AIRFLOW_USERNAME=user
            - AIRFLOW_PASSWORD=airflow
            - AIRFLOW_EXECUTOR=CeleryExecutor
        # volumes:
        #     - ${PROJECT_DIR}/airflow:/opt/bitnami/airflow
    airflow-scheduler:
        image: bitnami/airflow-scheduler:latest
        container_name: airflow_scheduler_clap
        # entrypoint: ["echo", "Airflow-scheduler disabled"] # Uncomment this line to disable the container
        depends_on:
            - airflow-webserver
            - redis
            - lantern-suite
        environment:
            - AIRFLOW_DATABASE_HOST=172.17.0.1
            - AIRFLOW_DATABASE_PORT_NUMBER=15432
            - AIRFLOW_DATABASE_NAME=airflow_db
            - AIRFLOW_DATABASE_USERNAME=airflow
            - AIRFLOW_DATABASE_PASSWORD=airflow_pass
            - REDIS_HOST=172.17.0.1
            - REDIS_PORT_NUMBER=16379
            - AIRFLOW_WEBSERVER_HOST=172.17.0.1
            - AIRFLOW_WEBSERVER_PORT_NUMBER=18080
            - AIRFLOW_EXECUTOR=CeleryExecutor
    dozzle:
        image: amir20/dozzle:latest
        container_name: dozzle_clap
        # entrypoint: ["echo", "Dozzle disabled."] # Uncomment this line to disable the container
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - 19999:8080
    dbgate:
        image: dbgate/dbgate
        container_name: dbgate_clap
        # entrypoint: ["echo", "DBGate disabled."] # Uncomment this line to disable the container
        ports:
            - 13000:3000
        depends_on:
            - lantern-suite
        stdin_open: true
        tty: true
        restart: always
    code-server:
        image: lscr.io/linuxserver/code-server:latest
        container_name: code_clap
        # entrypoint: ["echo", "Code-server disabled."] # Uncomment this line to disable the container
        environment:
            - PUID=1000
            - PGID=1000
            - TZ=Etc/UTC
            - PASSWORD=password #optional
            - HASHED_PASSWORD= #optional
            - SUDO_PASSWORD=password #optional
            - SUDO_PASSWORD_HASH= #optional
            - PROXY_DOMAIN=code-server.my.domain #optional
            - DEFAULT_WORKSPACE=/workspace #optional
        volumes:
            - ${PROJECT_DIR}/workspace:/workspace
        ports:
            - 18443:8443
        restart: unless-stopped
    dashy:
        image: lissy93/dashy
        container_name: dashy_clap
        # entrypoint: ["echo", "Dashy disabled."] # Uncomment this line to disable the container
        volumes:
            - ${PROJECT_DIR}/configs/dashy/conf.yml:/app/user-data/conf.yml
        ports:
            - 20000:8080
        environment:
            - NODE_ENV=production
        restart: unless-stopped
        healthcheck:
          test: ['CMD', 'node', '/app/services/healthcheck']
          interval: 1m30s
          timeout: 10s
          retries: 3
          start_period: 40s
networks:
  clap:
    driver: host
